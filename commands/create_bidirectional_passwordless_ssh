#!/usr/bin/env bash

#
# create_bidirectional_passwordless_ssh
#
# Set up passwordless SSH to and from a user on this machine to any other machine
#

# Set the default arguments
user_name=
pem_filename=
pub_filename=

# Keep track of the original arguments passed to this script
original_arguments=()
for param in "$@"; do
  original_arguments+=("$param")
done

# Explain how to use this script
usage(){
	cat <<- EOF

  Usage: create_bidirectional_passwordless_ssh [options]

  Options:
    -u, --username <user>                   The user on this machine who will have bidirectional SSH
    -m, --pem_file <filename_with_path>     The full filename of the corresponding .pem file
    -b, --pub_file <filename_with_path>     The full filename of the corresponding .pub file
    -h, --help                              This message
	EOF
}

# If the user asks for help, print out the usage
set -- "${original_arguments[@]}"
while [ "$1" != "" ]; do
  case $1 in
    -h | --help )
      usage
      exit
      ;;
    *)
      shift
      ;;
  esac
done

# Capture the command line arguements from the user
set -- "${original_arguments[@]}"
while [ "$1" != "" ]; do
  case $1 in
    -u | --username )
      shift
      user_name=$1
      shift
      ;;
    -m | --pem_file )
      shift
      pem_filename=$1
      shift
      ;;
    -b | --pub_file )
      shift
      pub_filename=$1
      shift
      ;;
    *)
      usage
      exit 1
  esac
done

# Ensure the user we are setting up passwordless SSH for exists, and the .pem and .pub files also exist
if [ -z "$user_name" ]; then
  echo "The user must be provided; specify a valid user on this system with -u or --username"
  exit 1
fi
if [ $(cat /etc/passwd | grep "^$user_name:" | awk 'BEGIN { found="false" } { found="true" } END { print found }') != true ]; then
  echo "The user you are trying to set up passwordless SSH for does not exist; specify a valid user on this system with -u or --username"
  exit 1
fi
if [ ! -f "$pem_filename" ]; then
  echo "The .pem file does not exist; specify a valid .pem file with -m or --pem_file"
  exit 1
fi
if [ $(readlink -f "$pem_filename" | grep .pem$ | awk 'BEGIN { found="false" } { found="true" } END { print found }') != true ]; then
  echo "The private key file must end in .pem; specify a valid .pem file with -m or --pem_file"
  exit 1
fi
if [ ! -f "$pub_filename" ]; then
  echo "The .pub file does not exist; specify a valid .pub file with -b or --pub_file"
  exit 1
fi
if [ $(readlink -f "$pub_filename" | grep .pub$ | awk 'BEGIN { found="false" } { found="true" } END { print found }') != true ]; then
  echo "The public key file must end in .pub; specify a valid .pub file with -b or --pub_file"
  exit 1
fi

# Step 1: Establish the absolute path of:
# - the user's ~/.ssh folder
# - the current .pem file
# - the new .pem file
# - the current .pub file
# - the new .pub file
# - the users's authorized_keys file
absolute_path_of_users_ssh_folder="/home/$user_name/.ssh/"
absolute_path_of_current_pem_file=$(readlink -f $pem_filename)
absolute_path_of_new_pem_file="$absolute_path_of_users_ssh_folder$(basename $absolute_path_of_current_pem_file)"
absolute_path_of_current_pub_file=$(readlink -f $pub_filename)
absolute_path_of_new_pub_file="$absolute_path_of_users_ssh_folder$(basename $absolute_path_of_current_pub_file)"
absolute_path_of_users_authorized_keys_file="${absolute_path_of_users_ssh_folder}authorized_keys"
absolute_path_of_users_ssh_config_file ="${absolute_path_of_users_ssh_folder}config"

# Step 2: Create an empty ~/.ssh folder for the user, if it doesn't exist
sudo mkdir -p $absolute_path_of_users_ssh_folder
sudo chown $user_name:$user_name $absolute_path_of_users_ssh_folder
sudo chmod 700 $absolute_path_of_users_ssh_folder

# Step 3: Copy the .pem key to the user's ~/.ssh folder
sudo rm $absolute_path_of_new_pem_file 2> /dev/null
cat $absolute_path_of_current_pem_file | sudo tee $absolute_path_of_new_pem_file
sudo chown $user_name:$user_name $absolute_path_of_new_pem_file
sudo chmod 600 $absolute_path_of_new_pem_file

# Step 4: Copy the .pub key to the user's ~/.ssh folder
sudo rm $absolute_path_of_new_pub_file 2> /dev/null
cat $absolute_path_of_current_pub_file | sudo tee $absolute_path_of_new_pub_file
sudo chown $user_name:$user_name $absolute_path_of_new_pub_file
sudo chmod 644 $absolute_path_of_new_pub_file

# Step 5: Put the .pub key in the authorized_keys file, so we don't get the yes/no prompt when
# ssh'ing for the first time
sudo cat $absolute_path_of_new_pub_file | sudo tee $absolute_path_of_users_authorized_keys_file
sudo chmod 0600 $absolute_path_of_users_authorized_keys_file
sudo chown $user_name:$user_name $absolute_path_of_users_authorized_keys_file

# Step 6: To keep life simple, disable strict host key checking and add the identity file
# for all connections on this user
cat << EOF | sudo tee $absolute_path_of_users_ssh_config_file
Host *
    StrictHostKeyChecking no
    IdentityFile $absolute_path_of_new_pem_file
EOF
sudo chown $user_name:$user_name $absolute_path_of_users_ssh_config_file
sudo chmod 0644 $absolute_path_of_users_ssh_config_file
